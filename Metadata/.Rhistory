write.xlsx(DNA_metadata_KPAR, "samples_df_MLD_March2021_KPAR.xlsx")
DNA_metadata_KPAR_Zeu <- left_join(DNA_metadata, DNA_metadata_KPAR, by = "Sample_label") # join Zeu and KPAR with DNA metadata dataframe
write.xlsx(DNA_metadata_KPAR_Zeu, "samples_df_MLD_March2021_KPAR_zeu.xlsx")
### Create categorical variables euphotic vs aphotic (based on depth for now - pending to include Zeu)
DNA_metadata <- DNA_metadata_KPAR_Zeu  %>%
mutate(light_layer = ifelse(Depth < Zeu, "Euphotic", "Aphotic"))
## Extract month, year,...
DNA_metadata <- DNA_metadata %>%
mutate(year = year(Date)) %>% ## extract year
mutate(month = month(Date)) %>%
mutate(day = day(Date)) %>%
mutate(Julian = yday(Date))
DNA_metadata <- DNA_metadata[,c(1:16,70:73, 17:69)]
glimpse(DNA_metadata)
## Filter only seawater samples
DNA_metadata.sw <- DNA_metadata %>%
filter(Sample_Type == "Seawater")
## Filter only surface ML samples
DNA_metadata.ML <- DNA_metadata.sw %>%
filter(dens_layer == "surface")
## Filter only surface samples
DNA_metadata.sur <- DNA_metadata.sw %>%
filter(NominalDepth == 1)
## Filter only surface samples
DNA_metadata.euphotic <- DNA_metadata.sw %>%
filter(light_layer == "Euphotic")
############################################################
Surface_ranks <- DNA_metadata.sur %>%
mutate(RankChla1 = ntile(ChlaTot, 4)) %>%
mutate(RankChla2 = cut(ChlaTot, breaks=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 2.5,3 ), labels=c("0-0.1","0.1-0.2","0.2-0.3","0.4-0.5", "0.5-0.6","0.6-0.7","0.7-0.8","0.8-0.9","0.9-1.0", "1.0-1.5", "1.5-2.0", "2.0-2.5", "2.5-3.0"))) %>%
mutate(RankNO3 = ntile(NO3, 4)) %>%
mutate(RankDRSi = ntile(DRSi, 4)) %>%
mutate(RankLat1 = cut(Lat, breaks=c(-30,-35,-40,-45, -50,-55,-60, -65, -70, -75), labels=c("-70","-65","-60","-55", "-50","-45","-40", "-35", "-30"))) %>%
mutate(RankLat2 = ntile(Lat, 20)) %>%
select(Sample_label, RankChla1:RankLat2) %>%
distinct(Sample_label, .keep_all= TRUE)
# convert integer to factor and levels
Surface_ranks$RankChla1=as.factor(Surface_ranks$RankChla1)
Surface_ranks$RankChla2=as.factor(Surface_ranks$RankChla2)
Surface_ranks$RankNO3=as.factor(Surface_ranks$RankNO3)
Surface_ranks$RankDRSi=as.factor(Surface_ranks$RankDRSi)
Surface_ranks$RankLat1=as.factor(Surface_ranks$RankLat1)
Surface_ranks$RankLat2=as.factor(Surface_ranks$RankLat2)
write.xlsx(Surface_ranks, "samples_df_MLD_March2021_chla.rank.xlsx")
#Joining with DNA_metadata complete file
DNA_metadata.rank <- full_join(DNA_metadata, Surface_ranks, by = "Sample_label")
#DNA_metadata.rank <- DNA_metadata.rank[,c(1:41, 67:72, 42:66)]
### Creating new columns median Chla, Nitrate, for euphotic...
euphotic_median <- DNA_metadata.sw %>%
filter(light_layer == "Euphotic") %>%
group_by(Sample_label) %>%
summarize(median_NO3 = median(NO3, na.rm=TRUE), median_DRP = median(DRP, na.rm = TRUE), median_DRSi = median(DRSi, na.rm = TRUE), median_Chla = median(ChlaTot, na.rm = TRUE))
DNA_metadata.rank.median <- full_join(DNA_metadata.rank, euphotic_median, by = "Sample_label")
#DNA_metadata.rank.median <- DNA_metadata.rank.median[,c(1:58, 73:75, 59:72)]
DNA_metadata.rank.median <- full_join(DNA_metadata.rank, euphotic_median, by = "Sample_label")
#DNA_metadata.rank.median <- DNA_metadata.rank.median[,c(1:58, 73:75, 59:72)]
write.xlsx(DNA_metadata.rank.median, "samples_df_MLD_March2021_RANKED.xlsx")
otu_mat<- read_excel("OTU_table.xlsx")
tax_mat<- read_excel("TAX_table.xlsx")
samples_df <- read_excel("Metadata/samples_df_MLD_March2021_RANKED.xlsx") # using this metadata cuts down the phyloseq object to 385 samples - I dont know why!!!
row.names(otu_mat) <- otu_mat$OTUNumber
otu_mat <- otu_mat %>% select (-OTUNumber)
row.names(tax_mat) <- tax_mat$OTUNumber
tax_mat <- tax_mat %>% select (-OTUNumber)
row.names(samples_df) <- samples_df$Sample_ID ### Standard/safe way of doing to ensure the row names are unique by using the sample ID sent to the sequencing platform
samples_df <- samples_df %>% select (-Sample_ID)
duplicated(samples_df$Sample_ID)
otu_mat <- as.matrix(otu_mat)
tax_mat <- as.matrix(tax_mat)
mode(otu_mat) <- "numeric"
OTU = otu_table(otu_mat, taxa_are_rows = TRUE)
TAX = tax_table(tax_mat)
samples = sample_data(samples_df)
intomob123 <- phyloseq(OTU, TAX, samples)
intomob123
saveRDS(intomob123,str_c("intomob123_phyloseq_15March2021_RANKED.rds"))
knitr::opts_chunk$set(echo = TRUE)
ps <- readRDS("intomob123_phyloseq_15March2021_RANKED.rds")
# Seawater samples
ps_sw <-  ps %>%
subset_samples(Sample_Type == "Seawater") %>%
subset_samples(Water_mass.TS1 != "ANT" ) %>%
subset_samples((Sampling_Type != "Blank" ))
# Protist
ps_protist <-  ps_sw %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi")))
# Protist-synd
ps_protist_synd <- ps_sw %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi")))   %>%
subset_taxa(!(Class %in% c("Syndiniales", "Sarcomonadea")))
# Phyto
ps_phyto <-  ps_sw %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi")))   %>%
subset_taxa(Division %in% c("Chlorophyta", "Dinoflagellata", "Cryptophyta", "Haptophyta", "Ochrophyta", "Cercozoa")) %>%
subset_taxa(!(Class %in% c("Syndiniales", "Sarcomonadea")))
#PROTIST
ps_protist_median = median(sample_sums(ps_protist))
normalize_median = function(x, t=ps_protist_median) round(t * (x / sum(x)))
ps_protist_std = transform_sample_counts(ps_protist, normalize_median)
#PROTIST - Syndiniales
ps_protist_synd_median = median(sample_sums(ps_protist_synd))
normalize_median = function(x, t=ps_protist_synd_median) round(t * (x / sum(x)))
ps_protist_synd_std = transform_sample_counts(ps_protist_synd, normalize_median)
ps_protist_synd_std_eu <-  ps_protist_synd_std %>%
subset_samples(light_layer == "Euphotic")
topN <- 50
most_abundant_taxa <- sort(taxa_sums(ps_protist_synd_std_eu), TRUE)[1:topN]
Euphotic_T50_all <- prune_taxa(names(most_abundant_taxa), ps_protist_synd_std_eu)
plot_heatmap(Euphotic_T50_all, method = "NMDS", distance ="jaccard", binary = TRUE,
taxa.label = "Species", taxa.order = "Class", sample.label = "Area_U_Cast_Depth1",
trans=NULL, low="beige", high="red", na.value="beige") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust=1, size = 4)) +
theme(axis.text.y = element_text(size = 12))
## AREA CAST DEPTH
CairoPDF(file = "R.Figures/Heatmaps/Top50_euphotic_Protist_synd_March2021.pdf", width = 30, height = 10)
plot_heatmap(Euphotic_T50_all, method = "NMDS", distance ="jaccard", binary = TRUE,
taxa.label = "Species", taxa.order = "Class", sample.label = "Area_U_Cast_Depth1",
trans=NULL, low="beige", high="red", na.value="beige") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust=1, size = 4)) +
theme(axis.text.y = element_text(size = 12))
dev.off()
# SAMPLE LABEL DEPTH
CairoPDF(file = "R.Figures/Heatmaps/Top50_euphotic_Protist_synd-August2.pdf", width = 30, height = 10)
plot_heatmap(Euphotic_T30_all, method = "NMDS", distance ="jaccard", binary = TRUE,
taxa.label = "Species", taxa.order = "Class", sample.label = "Sample_label_depth",
trans=NULL, low="beige", high="red", na.value="beige") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust=1, size = 4)) +
theme(axis.text.y = element_text(size = 12))
CairoPDF(file = "R.Figures/Heatmaps/Top50_euphotic_Protist_synd-August2.pdf", width = 30, height = 10)
plot_heatmap(Euphotic_T50_all, method = "NMDS", distance ="jaccard", binary = TRUE,
taxa.label = "Species", taxa.order = "Class", sample.label = "Sample_label_depth",
trans=NULL, low="beige", high="red", na.value="beige") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust=1, size = 4)) +
theme(axis.text.y = element_text(size = 12))
dev.off()
CairoPDF(file = "R.Figures/Heatmaps/Top50_euphotic_Protist_synd-March2021.pdf", width = 30, height = 10)
plot_heatmap(Euphotic_T50_all, method = "NMDS", distance ="jaccard", binary = TRUE,
taxa.label = "Species", taxa.order = "Class", sample.label = "Sample_label_depth",
trans=NULL, low="beige", high="red", na.value="beige") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust=1, size = 4)) +
theme(axis.text.y = element_text(size = 12))
dev.off()
knitr::opts_chunk$set(echo = TRUE)
ps <- readRDS("intomob123_phyloseq_March2021_RANKED.rds")
ps <- readRDS("intomob123_phyloseq_15March2021_RANKED.rds")
ps
ps_sw <-  ps %>%
subset_samples(Sample_Type == "Seawater") %>%
#subset_samples((Project != "SOAP" )) %>%
#subset_samples((Project != "Bay of Plenty" )) %>%
### Remove SOAP samples until I get metadata complete
subset_samples(Water_mass.TS1 != "ANT" ) %>%
subset_samples((Sampling_Type != "Blank" )) ### Remove SOAP samples until I get metadata complete
ps_sw <-  ps_sw %>%
filter_taxa(function(x) sum(x) > 0 , TRUE)
ps_sw
# Remove Metazoa
# Remove Fungi
ps_protist <-  ps_sw %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi")))
ps_protist_synd <-  ps_sw %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi"))) %>%
subset_taxa(!(Class %in% c("Syndiniales", "Sarcomonadea")))
ps_phyto <-  ps_sw %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi")))   %>%
subset_taxa(Division %in% c("Chlorophyta", "Dinoflagellata", "Cryptophyta", "Haptophyta", "Ochrophyta", "Cercozoa")) %>%
subset_taxa(!(Class %in% c("Syndiniales", "Sarcomonadea")))
ps_protist_synd_eu <-  ps_protist_synd %>%
subset_samples(light_layer == "Euphotic")
ps_protist_division <- tax_glom(ps_protist_std, taxrank = "Division")
ps_protist_synd_division <- tax_glom(ps_protist_synd_std, taxrank = "Division")
# CLASS
ps_protist_class <- tax_glom(ps_protist_std, taxrank = "Class")
ps_protist_synd_class <- tax_glom(ps_protist_synd_std, taxrank = "Class")
### OPTION B - select PROTIST-SYND classes of interest based on based on RELATIVE abundance
protist.class.sum = tapply(taxa_sums(ps_protist_synd_class.rel), tax_table(ps_protist_synd_class.rel)[, "Class"], sum, na.rm=TRUE)
# Protist
ps_protist_class.rel = transform_sample_counts(ps_protist_class, function(OTU) OTU*100/sum(OTU))
#Protist-synd
ps_protist_synd_class.rel = transform_sample_counts(ps_protist_synd_class, function(OTU) OTU*100/sum(OTU))
### OPTION B - select PROTIST-SYND classes of interest based on based on RELATIVE abundance
protist.class.sum = tapply(taxa_sums(ps_protist_synd_class.rel), tax_table(ps_protist_synd_class.rel)[, "Class"], sum, na.rm=TRUE)
top20class = names(sort(protist.class.sum, TRUE))[1:20]
ps_protist_synd_class.top20 = prune_taxa((tax_table(ps_protist_synd_eu)[, "Class"] %in% top20class), ps_protist_synd_eu)
ps_protist_synd_class.top20
Class_names1 = data.frame(Class_reads = sort(taxa_sums(ps_protist_class.top20), TRUE), sorted = 1:ntaxa(ps_protist_class.top20), Class = tax_table(ps_protist_class.top20)[, "Class" ])
Class_names1 = data.frame(Class_reads = sort(taxa_sums(ps_protist_synd_class.top20), TRUE), sorted = 1:ntaxa(ps_protist_synd_class.top20), Class = tax_table(ps_protist_synd_class.top20)[, "Class" ])
Class_names1
## OPTION A - same as in class distribution
ps_protist_synd_eu_class <- ps_protist_synd_eu %>%
subset_taxa(Class %in% c("Mamiellophyceae", "Dinophyceae", "Chloropicophyceae","Prymnesiophyceae", "Bacillariophyta", "Pelagophyceae", "Prasino-Clade-V", "Cryptophyceae", "Dictyochophyceae", "Choanoflagellatea", "MAST", "Polycystinea", "Acantharea", "RAD-B", "RAD-A", "Spirotrichea" ))
# design formula
diagdds = phyloseq_to_deseq2(ps_protist_synd_class.top20, ~ Water_mass.TS1)
# select factors levels  or reference level to compare
diagdds$Water_mass.TS1 <- factor(diagdds$Water_mass.TS1, levels = c("STW","SAW", "STF")) # select factor levels
#diagdds$Water_mass.TS1 <- relevel(diagdds$Water_mass.TS1, ref = "STW") # reference level
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
# choose the factor and levels to compare
resSTW.SAW = results(diagdds, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STW", "SAW"), alpha = 0.01)
resSTW.STF = results(diagdds, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STW", "STF"), alpha = 0.01)
resSTF.SAW = results(diagdds, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STF", "SAW"), alpha = 0.01)
resOrdered <- resSTF[order(resSTF$pvalue),] # ordering results based on pvalue
# STW.SAW
alpha = 0.01
sigtab_STW.SAW = resSTW.SAW[which(resSTW.SAW$padj < alpha), ]
sigtab_STW.SAW = cbind(as(sigtab_STW.SAW, "data.frame"), as(tax_table(ps_protist_synd_eu)[rownames(sigtab_STW.SAW), ], "matrix"))
sigtab_STW.SAW_otu <- sigtab_STW.SAW %>% # otus information
rownames_to_column("Otu") %>%
unite(Otu_species, Otu, Species, sep = "_", remove = FALSE)
head(sigtab_STW.SAW_otu)
dim(sigtab_STW.SAW_otu) # dimensions of the data.frame - number of OTUs significantly different
# STW.STF
alpha = 0.01
sigtab_STW.STF = resSTW.STF[which(resSTW.STF$padj < alpha), ]
sigtab_STW.STF = cbind(as(sigtab_STW.STF, "data.frame"), as(tax_table(ps_protist_synd_eu)[rownames(sigtab_STW.STF), ], "matrix"))
sigtab_STW.STF_otu <- sigtab_STW.STF %>% # otus information
rownames_to_column("Otu") %>%
unite(Otu_species, Otu, Species, sep = "_", remove = FALSE)
head(sigtab_STW.STF)
dim(sigtab_STW.STF) # dimensions of the data.frame - number of OTUs significantly different
# STF.SAW
alpha = 0.01
sigtab_STF.SAW = resSTF.SAW[which(resSTF.SAW$padj < alpha), ]
sigtab_STF.SAW = cbind(as(sigtab_STF.SAW, "data.frame"), as(tax_table(ps_protist_synd_eu)[rownames(sigtab_STF.SAW), ], "matrix"))
sigtab_STF.SAW_otu <- sigtab_STF.SAW %>% # otus information
rownames_to_column("Otu") %>%
unite(Otu_species, Otu, Species, sep = "_", remove = FALSE)
head(sigtab_STF.SAW)
dim(sigtab_STF.SAW) # dimensions of the data.frame - number of OTUs significantly different
x = tapply(sigtab_STW.SAW$log2FoldChange, sigtab_STW.SAW$Division, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.SAW$Division = factor(as.character(sigtab_STW.SAW$Division), levels=names(x))
x = tapply(sigtab_STW.SAW$log2FoldChange, sigtab_STW.SAW$Species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.SAW$Species = factor(as.character(sigtab_STW.SAW$Species), levels=names(x))
x = tapply(sigtab_STW.SAW_otu$log2FoldChange, sigtab_STW.SAW_otu$Otu_species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.SAW_otu$Otu_species = factor(as.character(sigtab_STW.SAW_otu$Otu_species), levels=names(x))
# Plotting
ggplot(sigtab_STW.SAW_otu, aes(x=Otu_species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs SAW - Euphotic - Protist-synd")) +
coord_flip()
classes_division <- read.table("Color_division.csv", sep=",", header=T, check.names = F, comment.char = "")
classes_division$color_hex_division <-col2hex(classes_division$color_division)
library(col2hex)
library(ggplot2)
classes_division <- read.table("Color_division.csv", sep=",", header=T, check.names = F, comment.char = "")
classes_division$color_hex_division <-col2hex(classes_division$color_division)
# Plotting
ggplot(sigtab_STW.SAW_otu, aes(x=Otu_species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs SAW - Euphotic - Protist-synd")) +
coord_flip()
classes_division$color_hex_division <-col2hex(classes_division$color_division)
knitr::opts_chunk$set(echo = TRUE)
classes_division <- read.table("Color_division.csv", sep=",", header=T, check.names = F, comment.char = "")
classes_division$color_hex_division <-col2hex(classes_division$color_division)
library(stringr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(readr)
library(maps)
library(glue)
library("cowplot")
library("treemapify")
library("Cairo")
library("cairoDevice")
library(phyloseq)
library("readxl")
library("openxlsx")
library("gplots")
library(forcats)
library(mgcv)
# install.packages("tidyverse")
#
# install.packages("remotes")
# remotes::install_github("hadley/dplyr")
#
#    # library(pr2database)
#    # data("pr2")
classes_division <- read.table("Color_division.csv", sep=",", header=T, check.names = F, comment.char = "")
classes_division$color_hex_division <-col2hex(classes_division$color_division)
class_color_division <- structure(as.character(classes_division$color_division),.Names=as.character(classes_division$division))
classes_division$color_hex_class <-col2hex(classes_division$color_class)
class_color_class <- structure(as.character(classes_division$color_hex_class),.Names=as.character(classes_division$class))
classes_division <- read.table("Color_division.csv", sep=",", header=T, check.names = F, comment.char = "")
classes_division$color_hex_division <-col2hex(classes_division$color_division)
class_color_division <- structure(as.character(classes_division$color_division),.Names=as.character(classes_division$division))
classes_division$color_hex_class <-col2hex(classes_division$color_class)
class_color_class <- structure(as.character(classes_division$color_hex_class),.Names=as.character(classes_division$class))
# Plotting
ggplot(sigtab_STW.SAW_otu, aes(x=Otu_species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs SAW - Euphotic - Protist-synd")) +
coord_flip()
ggsave("DESeq_euphotic_STW_SAW_otus.pdf", path = "R.Figures/DESeq", dpi = 300, height = 18, width = 10)
# Plotting - species
ggplot(sigtab_STW.SAW, aes(x=Species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs SAW - Euphotic - Protist-synd")) +
coord_flip()
ggsave("DESeq_euphotic_STW_SAW_species.pdf", path = "R.Figures/DESeq", dpi = 300, height = 18, width = 10)
# Species order
x = tapply(sigtab_STW.STF$log2FoldChange, sigtab_STW.STF$Species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.STF$Species = factor(as.character(sigtab_STW.STF$Species), levels=names(x))
# OTUs order - visualizing otu_species in each row
x = tapply(sigtab_STW.STF_otu$log2FoldChange, sigtab_STW.STF_otu$Otu_species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.STF_otu$Otu_species = factor(as.character(sigtab_STW.STF_otu$Otu_species), levels=names(x))
# Species order
x = tapply(sigtab_STW.STF$log2FoldChange, sigtab_STW.STF$Species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.STF$Species = factor(as.character(sigtab_STW.STF$Species), levels=names(x))
# Species order
x = tapply(sigtab_STW.STF$log2FoldChange, sigtab_STW.STF$Species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.STF$Species = factor(as.character(sigtab_STW.STF$Species), levels=names(x))
# Plotting - species
ggplot(sigtab_STW.STF, aes(x=Otu_species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs STF - Euphotic - Protist-synd")) +
coord_flip()
x = tapply(sigtab_STW.STF$log2FoldChange, sigtab_STW.STF$Species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.STF$Species = factor(as.character(sigtab_STW.STF$Species), levels=names(x))
# Plotting - species
ggplot(sigtab_STW.STF, aes(x=Species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs STF - Euphotic - Protist-synd")) +
coord_flip()
ggsave("DESeq_euphotic_STW_STF_species.pdf", path = "R.Figures/DESeq", dpi = 300, height = 18, width = 10)
x = tapply(sigtab_STW.STF_otu$log2FoldChange, sigtab_STW.STF_otu$Otu_species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.STF_otu$Otu_species = factor(as.character(sigtab_STW.STF_otu$Otu_species), levels=names(x))
# Plotting - otus
ggplot(sigtab_STW.STF_otu, aes(x=Otu_species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs STF - Euphotic - Protist-synd")) +
coord_flip()
ggsave("DESeq_euphotic_STW_STF_otu.pdf", path = "R.Figures/DESeq", dpi = 300, height = 18, width = 10)
# Species order
x = tapply(sigtab_STF.SAW$log2FoldChange, sigtab_STF.SAW$Species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STF.SAW$Species = factor(as.character(sigtab_STF.SAW$Species), levels=names(x))
ggplot(sigtab_STF.SAW, aes(x=Species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STF vs SAW - Euphotic - Protist-synd")) +
coord_flip()
ggsave("DESeq_euphotic_STF_SAW.pdf", path = "R.Figures/DESeq", dpi = 300, height = 8, width = 8)
x = tapply(sigtab_STF.SAW_otu$log2FoldChange, sigtab_STF.SAW_otu$Otu_species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STF.SAW_otu$Otu_species = factor(as.character(sigtab_STF.SAW_otu$Otu_species), levels=names(x))
ggplot(sigtab_STF.SAW_otu, aes(x=Otu_species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STF vs SAW - Euphotic - Protist-synd")) +
coord_flip()
ggsave("DESeq_euphotic_STF_SAW_otu.pdf", path = "R.Figures/Species/DESeq", dpi = 300, height = 8, width = 8)
ggsave("DESeq_euphotic_STF_SAW_otu.pdf", path = "R.Figures/DESeq", dpi = 300, height = 8, width = 8)
View(resSTF.SAW)
View(resSTF.SAW)
sigtab_STW.STF
resSTW.STF
head(sigtab_STW.SAW_otu)
# Number of OTUs signifincantly different
sum(resSTW.SAW$padj < 0.01, na.rm=TRUE)
## summary of results
summary(resSTW.SAW)
resOrdered <- resSTF[order(resSTF$pvalue),] # ordering results based on pvalue
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
## OPTION C - Only the 200 most abundant species
species.sum = tapply(taxa_sums(ps_protist_synd_std), tax_table(ps_protist_synd_std)[, "Species"], mean, na.rm=TRUE)
## OPTION C - Only the 200 most abundant species
species.sum = tapply(taxa_sums(ps_protist_synd_std), tax_table(ps_protist_synd_std)[, "Species"], mean, na.rm=TRUE)
## OPTION C - Only the 200 most abundant species
species.sum = tapply(taxa_sums(ps_protist_synd_std), tax_table(ps_protist_synd_std)[, "Species"], mean, na.rm=TRUE)
## OPTION C - Only the 200 most abundant species
species.sum = tapply(taxa_sums(ps_protist_synd_eu), tax_table(ps_protist_synd_std)[, "Species"], mean, na.rm=TRUE)
## OPTION C - Only the 200 most abundant species
species.sum = tapply(taxa_sums(ps_protist_synd_eu), tax_table(ps_protist_synd_eu)[, "Species"], mean, na.rm=TRUE)
top200species = names(sort(species.sum, TRUE))[1:200]
Top200species = prune_taxa((tax_table(ps_protist_synd_std)[, "Species"] %in% top200species), ps_protist_synd_std)
Top200species
Species_names = data.frame(Species_reads = sort(taxa_sums(Top200species), TRUE), sorted = 1:ntaxa(Top200species), Species = tax_table(Top200species)[, "Species" ])
Species_names
# design formula
diagdds_class = phyloseq_to_deseq2(Top200species, ~ Water_mass.TS1)
# select factors levels  or reference level to compare
diagdds_class$Water_mass.TS1 <- factor(diagdds_class$Water_mass.TS1, levels = c("STW","SAW", "STF")) # select factor levels
# design formula
diagdds_top200 = phyloseq_to_deseq2(Top200species, ~ Water_mass.TS1)
# select factors levels  or reference level to compare
diagdds_top200$Water_mass.TS1 <- factor(diagdds_top200$Water_mass.TS1, levels = c("STW","SAW", "STF")) # select factor levels
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds_top200), 1, gm_mean)
diagdds_top200 = estimateSizeFactors(diagdds_top200, geoMeans = geoMeans)
diagdds_top200 = DESeq(diagdds_top200, fitType="local")
diagdds_top200 = DESeq(diagdds_top200, test="Wald", fitType="parametric")
# choose the factor and levels to compare
resSTW.SAW_top200 = results(diagdds_top200, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STW", "SAW"), alpha = 0.01)
resSTW.STF_top200 = results(diagdds_top200, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STW", "STF"), alpha = 0.01)
resSTF.SAW_top200 = results(diagdds_top200, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STF", "SAW"), alpha = 0.01)
resSTF.SAW_top200 = results(diagdds_top200, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STF", "SAW"), alpha = 0.01)
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(readr)
library(maps)
library(glue)
library("cowplot")
library("treemapify")
library("Cairo")
library("cairoDevice")
library(phyloseq)
library("readxl")
library("openxlsx")
library("gplots")
library(forcats)
library(mgcv)
library(tidyverse)
library(DESeq2)
library(apeglm)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("apeglm")
# choose the factor and levels to compare
resSTW.SAW_top200 = results(diagdds_top200, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STW", "SAW"), alpha = 0.01)
resSTW.STF_top200 = results(diagdds_top200, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STW", "STF"), alpha = 0.01)
resSTF.SAW_top200 = results(diagdds_top200, cooksCutoff = FALSE, contrast=c("Water_mass.TS1", "STF", "SAW"), alpha = 0.01)
resOrdered <- resSTW.SAW_top200[order(resSTW.SAW_top200$pvalue),] # ordering results based on pvalue
## summary of results
summary(resSTW.SAW_top200)
summary(resSTW.STF_top200)
summary(resSTF.SAW_top200)
# Number of OTUs signifincatnly different
sum(resSTW.SAW_top200$padj < 0.01, na.rm=TRUE)
sum(resSTW.STF_top200$padj < 0.01, na.rm=TRUE)
sum(resSTF.SAW_top200$padj < 0.01, na.rm=TRUE)
# STW.SAW
alpha = 0.01
sigtab_STW.SAW_top200 = resSTW.SAW_top200[which(resSTW.SAW_top200$padj < alpha), ]
sigtab_STW.SAW_top200 = cbind(as(sigtab_STW.SAW_top200, "data.frame"), as(tax_table(Top200species)[rownames(sigtab_STW.SAW_top200), ], "matrix"))
sigtab_STW.SAW_top200_otu <- sigtab_STW.SAW_top200 %>% # otus information
rownames_to_column("Otu") %>%
unite(Otu_species, Otu, Species, sep = "_", remove = FALSE)
head(sigtab_STW.SAW_top200_otu)
dim(sigtab_STW.SAW_top200_otu) # dimensions of the data.frame - number of OTUs significantly different
# STW.STF
alpha = 0.01
sigtab_STW.STF_top200 = resSTW.STF_top200[which(resSTW.STF_class$padj < alpha), ]
sigtab_STW.STF_top200 = resSTW.STF_top200[which(resSTW.STF_top200$padj < alpha), ]
sigtab_STW.STF_top200 = cbind(as(sigtab_STW.STF_top200, "data.frame"), as(tax_table(Top200species)[rownames(sigtab_STW.STF_top200), ], "matrix"))
sigtab_STW.STF_top200_otu <- sigtab_STW.STF_top200 %>% # otus information
rownames_to_column("Otu") %>%
unite(Otu_species, Otu, Species, sep = "_", remove = FALSE)
head(sigtab_STW.STF_top200)
dim(sigtab_STW.STF_top200) # dimensions of the data.frame - number of OTUs significantly different
# STF.SAW
alpha = 0.01
sigtab_STF.SAW_top200 = resSTF.SAW_top200[which(resSTF.SAW_top200$padj < alpha), ]
sigtab_STF.SAW_top200 = cbind(as(sigtab_STF.SAW_top200, "data.frame"), as(tax_table(Top200species)[rownames(sigtab_STF.SAW_top200), ], "matrix"))
sigtab_STF.SAW_top200_otu <- sigtab_STF.SAW_top200 %>% # otus information
rownames_to_column("Otu") %>%
unite(Otu_species, Otu, Species, sep = "_", remove = FALSE)
head(sigtab_STF.SAW_top200)
dim(sigtab_STF.SAW_top200)
# Species order - Single species in each row (including various ASVs with potentially different distributions)
x = tapply(sigtab_STW.SAW_top200$log2FoldChange, sigtab_STW.SAW_top200$Species, function(x) max(x))
x = sort(-x, TRUE)
sigtab_STW.SAW_top200$Species = factor(as.character(sigtab_STW.SAW_top200$Species), levels=names(x))
# Plotting
ggplot(sigtab_STW.SAW_top200, aes(x=Species, y=log2FoldChange, color=Class)) +
geom_point(size=2) +
scale_fill_manual(values = class_color_class) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +
ggtitle(paste (" STW vs SAW - Euphotic - Protist-synd - TOP200 SPECIES")) +
coord_flip()
ggsave("DESeq_euphotic_STW_SAW_top200.pdf", path = "R.Figures/DESeq", dpi = 300, height = 18, width = 10)
