ps <- list()
ps[["all"]] <- readRDS("intomob123_phyloseq_15March2021_RANKED.rds")
library("phyloseq")
library("vegan")
library("ggplot2")      # graphics
library("readxl")       # necessary to import the data from Excel file
library("dplyr")        # filter and reformat data frames
library("stringr")
library("DESeq2")
library("Rmisc")
library("dplyr")
library("tidyr")
library("openxlsx")
library("lubridate")
library("reshape2")
library("Cairo")
library("cairoDevice")
library("hrbrthemes")
library("viridis")
library("Cairo")
library("cairoDevice")
library(glue)
#Very important, must remove taxa that are not present in one sample set
#creating sample_types
sample_types = c("Seawater", "Trap", "Sediment")
ps[["Seawater"]] <-  ps[["all"]] %>%
subset_samples(Sample_Type == "Seawater")
ps[["Trap"]] <-  ps[["all"]] %>%
subset_samples(Sample_Type == "Trap")
ps[["Sediment"]] <-  ps[["all"]] %>%
subset_samples(Sample_Type == "Sediment")
ps[["Sediment"]] <-  ps[["all"]] %>%
subset_samples(Sample_Type == "Sediment")
ps[["all"]] <- readRDS("intomob123_phyloseq_15March2021_RANKED.rds")
ps <- list()
ps[["all"]] <- readRDS("intomob123_phyloseq_15March2021_RANKED.rds")
#Very important, must remove taxa that are not present in one sample set
#creating sample_types
sample_types = c("Seawater", "Trap", "Sediment")
ps[["Seawater"]] <-  ps[["all"]] %>%
subset_samples(Sample_Type == "Seawater")
ps[["Trap"]] <-  ps[["all"]] %>%
subset_samples(Sample_Type == "Trap")
ps[["Sediment"]] <-  ps[["all"]] %>%
subset_samples(Sample_Type == "Sediment")
ps[["EEZ"]] <- subset_samples(ps[["Seawater"]], (Water_mass.TS1 != "ANT" )) ### Remove Samples south of the SAF (from TAN1802 - Except CTD1 deployed in SAF 58.027 S; 174.2135 E)
ps[["EEZ"]] <- subset_samples(ps[["EEZ"]], (Sampling_Type != "Blank" )) ### Remove blanks
ps[["EEZ"]] <- ps[["EEZ"]] %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi")))
#subset_taxa(!(Class %in% c("Syndiniales", "Sarcomonadea")))
#Very important, must remove taxa that are not present in one sample set
#creating sample_types
Water_mass.TS1 = c("STW", "STF", "SAW")
ps[["STW"]] <-  ps[["EEZ"]] %>%
subset_samples(Water_mass.TS1 == "STW")
ps[["STF"]] <-  ps[["EEZ"]] %>%
subset_samples(Water_mass.TS1 == "STF")
ps[["SAW"]] <-  ps[["EEZ"]] %>%
subset_samples(Water_mass.TS1 == "SAW")
#ps[["ANT"]] <-  ps[["Seawater"]] %>%
#subset_samples(Water_mass.TS1 == "ANT")
# Median number of reads in samples across different water masses
for (one_sample_type in Water_mass.TS1) {
nnn <- median(sample_sums(ps[[one_sample_type]])  )
print(glue("Phyloseq - {one_sample_type}"))
print(nnn)
cat("============================\n")
}
# Remove ASVs that are not present in the dataset
for (one_sample_type in Water_mass.TS1) {
ps[[one_sample_type]] <- ps[[one_sample_type]] %>%
filter_taxa(function(x) sum(x) > 0 , TRUE)
print(glue("Phyloseq - {one_sample_type}"))
print(ps[[one_sample_type]] )
cat("============================\n")
}
water_mass_light= c("EEZ_euphotic","EEZ_aphotic","STW_euphotic","STW_aphotic", "STF_euphotic", "STF_aphotic", "SAW_euphotic", "SAW_aphotic")
ps[["EEZ_euphotic"]] <-  ps[["EEZ"]] %>%  subset_samples(light_layer== "Euphotic")
ps[["EEZ_aphotic"]] <-  ps[["EEZ"]] %>%  subset_samples(light_layer== "Aphotic")
ps[["STW_euphotic"]] <-  ps[["STW"]] %>%  subset_samples(light_layer== "Euphotic")
ps[["STW_aphotic"]] <-  ps[["STW"]] %>%  subset_samples(light_layer== "Aphotic")
ps[["STF_euphotic"]] <-  ps[["STF"]] %>%  subset_samples(light_layer== "Euphotic")
ps[["STF_aphotic"]] <-  ps[["STF"]] %>%  subset_samples(light_layer== "Aphotic")
ps[["SAW_euphotic"]] <-  ps[["SAW"]] %>%  subset_samples(light_layer== "Euphotic")
ps[["SAW_aphotic"]] <-  ps[["SAW"]] %>%  subset_samples(light_layer== "Aphotic")
# Median number of reads in samples across different water masses
for (one_sample_type in water_mass_light) {
nnn <- median(sample_sums(ps[[one_sample_type]])  )
print(glue("Phyloseq - {one_sample_type}"))
print(nnn)
cat("============================\n")
}
# Phyloseq objects N samples and ASVs
for (one_sample_type in water_mass_light) {
print(glue("Phyloseq - {one_sample_type}"))
print(ps[[one_sample_type]] )
cat("============================\n")
}
# Set colors for plotting
Water_mass_colors <- c(
"#00688b", "#44c45d","#e0301e")
# PwC palette for STW
#coastlines palette for STF
# Flux palette for SAW
Area_colors <- c(
"#e0301e","#ffc100", "#00688b","#39ff14" ,"#0befff","#0a5700", "#ff77ff","#708090","#602320")
Area_BoP_colors <- c("#ffc100", "#00688b","#39ff14" ,"#0befff","#0a5700", "#ff77ff","#708090","#602320") # if Bay of Plenty is left out
Nitrate_colors <- c("#dc6900", "#00688b", "#0befff","#44c45d", "#a32020","#c0c0c0","#00b5e2","#602320")
# Set colors for plotting
Water_mass_colors <- c(
"#00688b", "#44c45d","#e0301e")
Water_mass_colors <- c(
"#00688b", "#44c45d","#e0301e")
Area_colors <- c(
"#e0301e","#ffc100", "#00688b","#39ff14" ,"#0befff","#0a5700", "#ff77ff","#708090","#602320")
Area_BoP_colors <- c("#ffc100", "#00688b","#39ff14" ,"#0befff","#0a5700", "#ff77ff","#708090","#602320")
Nitrate_colors <- c("#dc6900", "#00688b", "#0befff","#44c45d", "#a32020","#c0c0c0","#00b5e2","#602320")
ps[["EEZ"]] ## All samples
ps[["EEZ_euphotic"]] ## euphotic samples only
ps_protist_median = median(sample_sums(ps[["EEZ"]]))
normalize_median = function(x, t=ps_protist_median) round(t * (x / sum(x)))
ps_protist_std = transform_sample_counts(ps[["EEZ"]], normalize_median)
ps_protist_median = median(sample_sums(ps[["EEZ_euphotic"]]))
normalize_median = function(x, t=ps_protist_median) round(t * (x / sum(x)))
ps_protist_std = transform_sample_counts(ps[["EEZ_euphotic"]], normalize_median)
intomob123 <-  ps_protist_std
#Ordinate samples - NMDS
intomob123.ord <- ordinate(intomob123, "NMDS", "bray")
plot_ordination(intomob123, intomob123.ord, type="samples", color="Water_mass.TS1", shape= "light_layer", title="Samples - Euphotic vs meso- & Bathypelagic", label = "sample") +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
plot_ordination(intomob123, intomob123.ord, type="samples", color="Water_mass.TS1", shape= "light_layer", title="Samples - Euphotic vs meso- & Bathypelagic", label = "Sample_label_depth") +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
# EUPHOTIC - Figure 4 ###
intomob123_euphotic <-  ps_protist_std %>%
# intomob123_euphotic <-  ps_protist_synd_std %>% # protist without syndiniales
subset_samples(light_layer == "Euphotic")
#Number of samples
nsamples(intomob123_euphotic)
#Ordinate samples - NMDS
intomob123_euphotic.ord <- ordinate(intomob123_euphotic, "NMDS", "bray")
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Water_mass.TS1", shape= "Area2", title="Protist - Euphotic - nMDS - Bray-Curtis", , label = "Sample_label_depth") + geom_point(size = 3, alpha = 0.7) +
scale_shape_manual(values=c(0, 1, 2, 5, 7, 8, 10, 3, 6)) +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Cruise.TAN", shape= "Water_mass.TS1", title="Protist - Euphotic - nMDS - Bray-Curtis" , label = "Sample_label_depth") + geom_point(size = 3, alpha = 0.7)
# EUPHOTIC - Figure 4 ###
intomob123_euphotic <-  ps_protist_std %>%
# intomob123_euphotic <-  ps_protist_synd_std %>% # protist without syndiniales
subset_samples(light_layer == "Euphotic")
#Number of samples
nsamples(intomob123_euphotic)
#Ordinate samples - NMDS
intomob123_euphotic.ord <- ordinate(intomob123_euphotic, "NMDS", "bray")
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Water_mass.TS1", shape= "Area2", title="Protist - Euphotic - nMDS - Bray-Curtis") + geom_point(size = 3, alpha = 0.7) +
scale_shape_manual(values=c(0, 1, 2, 5, 7, 8, 10, 3, 6)) +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
CairoPDF(file = "R.Figures/nMDS/intomob123_euphotic_area_V2.pdf", width = 6, height = 4)
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Water_mass.TS1", shape= "Area2", title="Protist - Euphotic - nMDS - Bray-Curtis") + geom_point(size = 3, alpha = 0.7) +
scale_shape_manual(values=c(0, 1, 2, 5, 7, 8, 10, 3, 6)) +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
dev.off()
CairoPDF(file = "R.Figures/nMDS/intomob123_euphotic_area_V2.pdf", width = 6, height = 4)
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Water_mass.TS1", shape= "Area2", title="Protist - Euphotic - nMDS - Bray-Curtis") + geom_point(size = 3, alpha = 0.7) +
scale_shape_manual(values=c(0, 1, 2, 5, 7, 8, 10, 3, 6)) +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
dev.off()
# EUPHOTIC - Figure 4 ###
intomob123_euphotic <-  ps_protist_std %>%
# intomob123_euphotic <-  ps_protist_synd_std %>% # protist without syndiniales
subset_samples(light_layer == "Euphotic")
#Number of samples
nsamples(intomob123_euphotic)
#Ordinate samples - NMDS
intomob123_euphotic.ord <- ordinate(intomob123_euphotic, "NMDS", "bray")
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Water_mass.TS1", shape= "Area2", title="Protist - Euphotic - nMDS - Bray-Curtis") + geom_point(size = 3, alpha = 0.7) +
scale_shape_manual(values=c(0, 1, 2, 5, 7, 8, 10, 3, 6)) +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples",   color="Water_mass.TS1", title="Protist - Euphotic - nMDS - Bray-Curtis",  label = "Sample_label_depth") +
geom_point(size = 3, alpha = 0.7) +
theme_bw()
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Water_mass.TS1", shape= "Area2", title="Protist - Euphotic - nMDS - Bray-Curtis") + geom_point(size = 3, alpha = 0.7) +
# scale_shape_manual(values=c(0, 1, 2, 5, 7, 8, 10, 3, 6)) +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
plot_ordination(intomob123_euphotic, intomob123_euphotic.ord, type="samples", color="Water_mass.TS1", shape= "Area2", title="Protist - Euphotic - nMDS - Bray-Curtis") + geom_point(size = 3, alpha = 0.7) +
scale_shape_manual(values=c(0, 1, 2, 5, 7, 8, 10, 3, 6)) +
scale_color_manual(values = Water_mass_colors) +
theme_bw()
sample_variables(intomob123_euphotic)
unique(sample_variables(intomob123_sw)[7])
unique(sample_variables(intomob123_euphotic)[7])
sample_variables(intomob123_euphotic)[7]
sample_variables(intomob123_euphotic)[7]
sample_variables(intomob123_euphotic)[7][unique]
sample_variables(intomob123_euphotic)[7][600]
sample_variables(intomob123_euphotic)[7][1,500]
sample_variables(intomob123_euphotic)[7][1,300]
sample_variables(intomob123_euphotic)[7][1:300]
get_variable(intomob123_euphotic, sample_variables(intomob123_sw)[7])[1:10]
get_variable(intomob123_euphotic, sample_variables(intomob123_euphotic)[7])[1:10]
unique(get_variable(intomob123_euphotic, sample_variables(intomob123_euphotic)[7])[1:300])
## Identify factors within each variable
unique(get_variable(intomob123, sample_variables(intomob123)[7])[1:300])
ps_protist_median = median(sample_sums(ps[["EEZ"]]))
normalize_median = function(x, t=ps_protist_median) round(t * (x / sum(x)))
ps_protist_std = transform_sample_counts(ps[["EEZ"]], normalize_median)
## Identify factors within each variable
unique(get_variable(ps_protist_std, sample_variables(ps_protist_std)[7])[1:300])
## Identify factors within each variable
unique(get_variable(ps[["EEZ_euphotic"]], sample_variables(ps[["EEZ_euphotic"]])[7])[1:300])
## Identify factors within each variable
unique(get_variable(ps[["EEZ_euphotic"]], sample_variables(ps[["EEZ_euphotic"]])[7])[1:400])
## Identify factors within each variable
unique(get_variable( ps[["all"]], sample_variables( ps[["all"]])[7])[1:400])
## Identify factors within each variable
unique(get_variable( ps[["all"]], sample_variables( ps[["all"]])[7])[1:500])
otu_mat<- read_excel("OTU_table.xlsx")
tax_mat<- read_excel("TAX_table.xlsx")
samples_df <- read_excel("samples_df_MLD_July2020_RANKED.xlsx")
rownames(samples_df)
colnames(otu_mat)
#otu_mat <- as.data.frame(lapply(otu_mat, as.numeric))
row.names(otu_mat) <- otu_mat$OTUNumber
otu_mat <- otu_mat %>% select (-OTUNumber)
row.names(tax_mat) <- tax_mat$OTUNumber
tax_mat <- tax_mat %>% select (-OTUNumber)
row.names(samples_df) <- samples_df$Sample_ID ### Standard/safe way of doing to ensure the row names are unique by using the sample ID sent to the sequencing platform
samples_df <- samples_df %>% select (-Sample_ID)
duplicated(samples_df$Sample_ID)
otu_mat <- as.matrix(otu_mat)
tax_mat <- as.matrix(tax_mat)
mode(otu_mat) <- "numeric"
OTU = otu_table(otu_mat, taxa_are_rows = TRUE)
TAX = tax_table(tax_mat)
samples = sample_data(samples_df)
intomob123 <- phyloseq(OTU, TAX, samples)
intomob123
saveRDS(intomob123,str_c("intomob123_phyloseq_15March2021_RANKED.rds"))
intomob123_15April2021 <- readRDS("intomob123_phyloseq_15March2021_RANKED.rds") ### load previously saved phyloseq object
sample_variables(intomob123_15April2021)
## Identify factors within each variable
unique(get_variable( intomob123_15April2021, sample_variables( intomob123_15April2021)[7])[1:500])
## Identify factors within each variable
unique(get_variable( intomob123_15April2021, sample_variables( intomob123_15April2021)[7]))
row.names(tax_mat) <- tax_mat$OTUNumber
row.names(otu_mat) <- otu_mat$OTUNumber
otu_mat<- read_excel("OTU_table.xlsx")
otu_mat<- read_excel("OTU_table.xlsx")
tax_mat<- read_excel("TAX_table.xlsx")
tax_mat<- read_excel("TAX_table.xlsx")
samples_df <- read_excel("samples_df_MLD_July2020_RANKED.xlsx")
rownames(samples_df)
colnames(otu_mat)
row.names(otu_mat) <- otu_mat$OTUNumber
View(otu_mat)
otu_mat <- otu_mat %>% select (-OTUNumber)
row.names(tax_mat) <- tax_mat$OTUNumber
tax_mat <- tax_mat %>% select (-OTUNumber)
row.names(samples_df) <- samples_df$Sample_ID ### Standard/safe way of doing to ensure the row names are unique by using the sample ID sent to the sequencing platform
samples_df <- samples_df %>% select (-Sample_ID)
otu_mat <- as.matrix(otu_mat)
tax_mat <- as.matrix(tax_mat)
OTU = otu_table(otu_mat, taxa_are_rows = TRUE)
View(otu_mat)
