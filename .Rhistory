library("ggplot2")
library("phyloseq")
library("vegan")
library("DESeq2")
library("Rmisc")
library("dplyr")
library("tidyr")
library("readxl")
library("stringr")
library("openxlsx")
library(lubridate)
library(reshape2)
library(Cairo)
library(cairoDevice)
library(hrbrthemes)
library(viridis)
library(tidyverse)
# devtools::install_github("hadley/r4ds")
# install.packages("lazyeval")
# install.packages("ggplot2")
DNA_metadata <-  read_excel("samples_df_MLD_July2020.xlsx") %>%
select(-c(Temp:Sequencing_round, Cruise, Total_Ciliate_abund:NO2_ave, PC_ave, FlowTotalPNE_ave, NH4))
## make depth column with equal number of digits
DNA_metadata$Depth1 <- str_pad(DNA_metadata$Depth, width=4, side="left", pad="0")
DNA_metadata <- DNA_metadata[,c(1:18,61, 19:60)]
## new columns for labelling purposes
# DNA_metadata$sample_label<-paste(DNA_metadata$Sample_info,"_",DNA_metadata$Leg) ## Create column to identify unique profiles - in BPM, these are sometimes built from consecutive casts.
DNA_metadata <- DNA_metadata %>%
unite(Sample_label, Sample_info,Leg, sep = "_", remove = FALSE) %>%
unite(U_Cast_Depth1, Station, Depth1, sep = "_", remove = FALSE) %>%
unite(Sample_label_depth, Sample_label, Depth1, sep = "_", remove = FALSE) %>%
unite(Area_U_Cast_Depth1, Area2, U_Cast_Depth1, sep = "_", remove = FALSE) %>%
unite(Cruise_project, Project, Cruise.TAN, sep = "_", remove = FALSE) %>%
rowid_to_column("Number_ID")
# sample labelling ucast + depth to later on merge the methodological replicates into a single row
DNA_metadata <- DNA_metadata %>%
rename(Depth.CTD = Depth..m..DOUBLE) %>%
rename(BotDepth.CTD = Bot..Depth..m..DOUBLE) %>%
rename(Pressure.CTD = Pressure..db..DOUBLE) %>%
rename(Temperature.CTD = Temperature...C..DOUBLE) %>%
rename(Salinity.CTD = Salinity..PSS.78..DOUBLE) %>%
rename(Oxygen.CTD = Oxygen..mmol.kg..DOUBLE) %>%
rename(Fluorescence.CTD = Fluorescence..milligrams.m.3..DOUBLE) %>%
rename(Transmission.CTD = Transmission....relative.to.air..DOUBLE) %>%
rename(Turbidity.CTD = Turbidity..FTU..DOUBLE) %>%
rename(Latitude.CTD = Latitude..degrees.North..DOUBLE) %>%
rename(Longitude.CTD = Longitude..degrees.East..DOUBLE) %>%
rename(Potential.Temperature.CTD = Potential.Temperature...C..DOUBLE) %>%
rename(ChlaTot = Chla_total) %>%
rename(MLD0.2C = MLD_0.2C)
## Calculate KPAR and Zeu based on chla concentration
DNA_metadata_KPAR <- DNA_metadata %>%
filter(QA==0) %>%
filter(Sample_Type == "Seawater") %>% # only water column samples
filter(Sampling_Type != "Blank") %>% # remove blanks
filter(Sampling_Type != "Incubation") %>% # remove incubations from 1516
filter(NominalDepth == 1) %>% # only surface mixed layer - 1 sample/profile
distinct(U_Cast_Depth1, .keep_all = TRUE) %>% # remove the underway samples in TAN11516 and methodologicalreplicates
mutate(KPAR = log(100)/exp((3.7103 + log(ChlaTot)*(-0.4603) + log(ChlaTot)*(0.000895)^2 + log(ChlaTot)*(0.001868)^3 + log(ChlaTot)*(-0.00079)^4))) %>% # calculate KPAR with Morel and MAritorena 2006
mutate(Zeu = log(100)/KPAR) %>% # calculate Zeu 1%
select(Sample_label, KPAR:Zeu)
write.xlsx(DNA_metadata_KPAR, "samples_df_MLD_July2020_KPAR.xlsx")
DNA_metadata_KPAR_Zeu <- left_join(DNA_metadata, DNA_metadata_KPAR, by = "Sample_label") # join Zeu and KPAR with DNA metadata dataframe
write.xlsx(DNA_metadata_KPAR_Zeu, "samples_df_MLD_July2020_KPAR_zeu.xlsx")
### Create categorical variables euphotic vs aphotic (based on depth for now - pending to include Zeu)
DNA_metadata <- DNA_metadata_KPAR_Zeu  %>%
mutate(light_layer = ifelse(Depth < Zeu, "Euphotic", "Aphotic"))
## Extract month, year,...
DNA_metadata <- DNA_metadata %>%
mutate(year = year(Date)) %>% ## extract year
mutate(month = month(Date)) %>%
mutate(day = day(Date)) %>%
mutate(Julian = yday(Date))
DNA_metadata <- DNA_metadata[,c(1:16,70:73, 17:69)]
glimpse(DNA_metadata)
## Filter only seawater samples
DNA_metadata.sw <- DNA_metadata %>%
filter(Sample_Type == "Seawater")
## Filter only surface ML samples
DNA_metadata.ML <- DNA_metadata.sw %>%
filter(dens_layer == "surface")
## Filter only surface samples
DNA_metadata.sur <- DNA_metadata.sw %>%
filter(NominalDepth == 1)
## Filter only surface samples
DNA_metadata.euphotic <- DNA_metadata.sw %>%
filter(light_layer == "Euphotic")
############################################################
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(readr)
library(maps)
library(glue)
library("cowplot")
library("treemapify")
library("Cairo")
library("cairoDevice")
library(phyloseq)
library("readxl")
library("openxlsx")
library("gplots")
library(forcats)
library(mgcv)
#source("https://raw.githubusercontent.com/mahendramariadassou/phyloseq-extended/master/load-extra-functions.R" ) ## does not connect
ps <- readRDS("intomob123_phyloseq_15March2021_RANKED.rds")
ps_sw <-  ps %>%
subset_samples(Sample_Type == "Seawater") %>%
subset_samples(Water_mass.TS1 != "ANT" ) %>%
subset_samples((Sampling_Type != "Blank" )) ### Remove blank samples
ps_sw <-  ps_sw %>%
filter_taxa(function(x) sum(x) > 0 , TRUE)
ps_sw
# Remove Metazoa
# Remove Fungi
# Protist - syndiniales and sarcomonadae
ps_protist_synd <-  ps_sw %>%
subset_taxa(!(Division %in% c("Metazoa", "Fungi"))) %>%
subset_taxa(!(Class %in% c("Syndiniales", "Sarcomonadea")))
get_taxa_unique(ps_protist_synd, "Class")
classes_division <- read.table("Color_division.csv", sep=",", header=T, check.names = F, comment.char = "")
classes_division$color_hex_division <-col2hex(classes_division$color_division)
class_color_division <- structure(as.character(classes_division$color_division),.Names=as.character(classes_division$division))
classes_division$color_hex_class <-col2hex(classes_division$color_class)
class_color_class <- structure(as.character(classes_division$color_hex_class),.Names=as.character(classes_division$class))
#PROTIST-SYND
ps_protist_synd_median = median(sample_sums(ps_protist_synd))
normalize_protist_synd_median = function(x, t=ps_protist_synd_median) round(t * (x / sum(x)))
ps_protist_synd_std = transform_sample_counts(ps_protist_synd, normalize_protist_synd_median)
### most abundant species in specific classes
##Different classes
ps_class <- ps_protist_synd_std %>%
subset_taxa(Class == "Prymnesiophyceae")
#("Bacillariophyta", "Prymnesiophyceae", "Pelagophyceae", "Mamiellophyceae", "Chloropicophyceae", "Cryptophyceae))
species.sum = tapply(taxa_sums(ps_class), tax_table(ps_class)[, "Species"], mean, na.rm=TRUE)
top100species = names(sort(species.sum, TRUE))[1:50]
Top100species = prune_taxa((tax_table(ps_protist_synd_std)[, "Species"] %in% top100species), ps_protist_synd_std)
Top100species
Species_names = data.frame(Species_reads = sort(taxa_sums(Top100species), TRUE), sorted = 1:ntaxa(Top100species), Species = tax_table(Top100species)[, "Species" ])
# write.xlsx(Species_names , file = "Tables/Species_abundance_MEAN_March2021_top100.xlsx")
### most abundant species in specific classes
##Different classes
ps_class <- ps_protist_synd_std %>%
subset_taxa(Class == "Cryptophyceae")
#("Bacillariophyta", "Prymnesiophyceae", "Pelagophyceae", "Mamiellophyceae", "Chloropicophyceae", "Cryptophyceae))
species.sum = tapply(taxa_sums(ps_class), tax_table(ps_class)[, "Species"], mean, na.rm=TRUE)
top100species = names(sort(species.sum, TRUE))[1:50]
Top100species = prune_taxa((tax_table(ps_protist_synd_std)[, "Species"] %in% top100species), ps_protist_synd_std)
Top100species
Species_names = data.frame(Species_reads = sort(taxa_sums(Top100species), TRUE), sorted = 1:ntaxa(Top100species), Species = tax_table(Top100species)[, "Species" ])
# write.xlsx(Species_names , file = "Tables/Species_abundance_MEAN_March2021_top100.xlsx")
otu_df <- as.data.frame(Top100species@otu_table@.Data, stringsAsFactors = FALSE) %>%
rownames_to_column(var = "OTUNumber") %>%
pivot_longer(cols = -OTUNumber,
names_to = "file_code",
values_to = "n_reads",
values_drop_na = TRUE) %>%
#filter(n_reads != 0) %>%
filter(!is.na(n_reads))
# See https://github.com/joey711/phyloseq/issues/983
taxo_df <- as.data.frame(Top100species@tax_table@.Data, stringsAsFactors = FALSE) %>%
rownames_to_column(var = "OTUNumber")
otu_df <- left_join(taxo_df, otu_df)
metadata_df <- data.frame(sample_data(Top100species)) %>%
rownames_to_column(var = "file_code")
otu_df <- left_join(otu_df, metadata_df, by = c("file_code"))
OTU_abund_top100 <-left_join(otu_df, classes_division, by=c("Class"= "class"))
write.xlsx(OTU_abund_top100, file = "Tables/Cryptophyceae_Species_March2021_top100.xlsx")
OTU_abund_top100_eu  <- OTU_abund_top100 %>%
filter(light_layer == "Euphotic") %>%
group_by(OTUNumber, Water_mass.TS1) %>%
add_tally() %>%
mutate(mean_OTU = mean(n_reads, na.rm=TRUE), median_OTU = median(n_reads, na.rm=TRUE), Total_OTU = sum(n_reads, na.rm = TRUE), n_samples = mean(n)) %>%
select(OTUNumber:Water_mass.TS1, Sample_Type, light_layer, supergroup:Total_OTU) %>%
arrange(Water_mass.TS1, -Total_OTU) %>%
unite(OTU_water, OTUNumber, Water_mass.TS1, remove = FALSE) %>% # to allow selecting for distinct OTUs
unite(OTU_genus, OTUNumber, Genus, remove = FALSE) %>%
unite(OTU_species, OTUNumber, Species, remove = FALSE)
## Select most abundant OTUs for plotting SUM TOTAL read abundance values
OTU_abund_top100_eu_sum <- OTU_abund_top100_eu %>%
distinct(OTU_water, .keep_all = TRUE) %>%
arrange(Water_mass.TS1, -Total_OTU) %>%
group_by(Water_mass.TS1) %>%
top_n(20,Total_OTU)
## Select most abundant OTUs for plotting MEAN read abundance values
OTU_abund_top100_eu_mean <- OTU_abund_top100_eu %>%
distinct(OTU_water, .keep_all = TRUE) %>%
arrange(Water_mass.TS1, -mean_OTU) %>%
group_by(Water_mass.TS1) %>%
top_n(20, mean_OTU)
## Select most abundant OTUs for plotting MEDIAN read abundance values
OTU_abund_top100_eu_median <- OTU_abund_top100_eu %>%
distinct(OTU_water, .keep_all = TRUE) %>%
arrange(Water_mass.TS1, -median_OTU) %>%
group_by(Water_mass.TS1) %>%
top_n(20,median_OTU)
write.xlsx(OTU_abund_top100_eu_sum, file = "R.Figures/Species/perClass/Crypto_species_sum.xlsx")
# color coding # Water mass - SUM
color_class1 <- as.character(OTU_abund_top100_eu_sum$color_hex_class)
names(color_class1) <- as.character(OTU_abund_top100_eu_sum$Class)
OTU_abund_top100_eu_sum$OTU_species = with(OTU_abund_top100_eu_sum, reorder(OTU_species, Total_OTU))
#CairoPDF(file = "R.Figures/Species/Protist_Aphotic_top20b.pdf", width = 8, height =12)
#pdf(file="R.Figures/Species/Protist_euphotic_top20.pdf")
ggplot(OTU_abund_top100_eu_sum, aes(x=OTU_species, y=Total_OTU, fill=Class)) +
geom_bar(stat="identity", width = 0.9) +
scale_fill_manual(values = color_class1) +
theme_bw() +
theme(aspect.ratio = 2/1) +
ylim(0,30000) +
ggtitle(paste ("Cryptophytes - Euphotic - SUM")) +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size=6)) +
theme(axis.text.y=element_text(angle = 0, hjust = 1, size=4)) +
theme(panel.grid.major = element_line(size = 0.05, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.05, linetype = 'solid',
colour = "grey")) +
theme(axis.ticks = element_line(colour = "black", size = 0.05)) +
xlab("") +
ylab("Cumulative OTU - Sequencing depth standarized abundance") +
coord_flip() +
facet_wrap(~Water_mass.TS1, scales="free")
#CairoPDF(file = "R.Figures/Species/Protist_Aphotic_top20b.pdf", width = 8, height =12)
#pdf(file="R.Figures/Species/Protist_euphotic_top20.pdf")
ggplot(OTU_abund_top100_eu_sum, aes(x=OTU_species, y=Total_OTU, fill=Class)) +
geom_bar(stat="identity", width = 0.9) +
scale_fill_manual(values = color_class1) +
theme_bw() +
theme(aspect.ratio = 2/1) +
#ylim(0,30000) +
ggtitle(paste ("Cryptophytes - Euphotic - SUM")) +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size=6)) +
theme(axis.text.y=element_text(angle = 0, hjust = 1, size=4)) +
theme(panel.grid.major = element_line(size = 0.05, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.05, linetype = 'solid',
colour = "grey")) +
theme(axis.ticks = element_line(colour = "black", size = 0.05)) +
xlab("") +
ylab("Cumulative OTU - Sequencing depth standarized abundance") +
coord_flip() +
facet_wrap(~Water_mass.TS1, scales="free")
ggsave("Cryptophytes_euphotic_top20_SUM_OTUs.pdf", path = "R.Figures/Species/perClass", dpi = 300, height = 4, width = 8)
# color coding # Water mass - MEDIAN
color_class2 <- as.character(OTU_abund_top100_eu_median$color_hex_class)
names(color_class2) <- as.character(OTU_abund_top100_eu_median$Class)
OTU_abund_top100_eu_median$OTU_species = with(OTU_abund_top100_eu_median, reorder(OTU_species, median_OTU))
# color coding # Water mass - MEAN
color_class3 <- as.character(OTU_abund_top100_eu_mean$color_hex_class)
#CairoPDF(file = "R.Figures/Species/Protist_Aphotic_top20b.pdf", width = 8, height =12)
#pdf(file="R.Figures/Species/Protist_euphotic_top20.pdf")
ggplot(OTU_abund_top100_eu_mean, aes(x=OTU_species, y=Total_OTU, fill=Class)) +
geom_bar(stat="identity", width = 0.9) +
scale_fill_manual(values = color_class2) +
theme_bw() +
theme(aspect.ratio = 2/1) +
#ylim(0,30000) +
ggtitle(paste ("Cryptophytes - Euphotic - SUM")) +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size=6)) +
theme(axis.text.y=element_text(angle = 0, hjust = 1, size=4)) +
theme(panel.grid.major = element_line(size = 0.05, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.05, linetype = 'solid',
colour = "grey")) +
theme(axis.ticks = element_line(colour = "black", size = 0.05)) +
xlab("") +
ylab("Cumulative OTU - Sequencing depth standarized abundance") +
coord_flip() +
facet_wrap(~Water_mass.TS1, scales="free")
#CairoPDF(file = "R.Figures/Species/Protist_Aphotic_top20b.pdf", width = 8, height =12)
#pdf(file="R.Figures/Species/Protist_euphotic_top20.pdf")
ggplot(OTU_abund_top100_eu_mean, aes(x=OTU_species, y=Total_OTU, fill=Class)) +
geom_bar(stat="identity", width = 0.9) +
scale_fill_manual(values = color_class1) +
theme_bw() +
theme(aspect.ratio = 2/1) +
#ylim(0,30000) +
ggtitle(paste ("Cryptophytes - Euphotic - SUM")) +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size=6)) +
theme(axis.text.y=element_text(angle = 0, hjust = 1, size=4)) +
theme(panel.grid.major = element_line(size = 0.05, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.05, linetype = 'solid',
colour = "grey")) +
theme(axis.ticks = element_line(colour = "black", size = 0.05)) +
xlab("") +
ylab("Cumulative OTU - Sequencing depth standarized abundance") +
coord_flip() +
facet_wrap(~Water_mass.TS1, scales="free")
color_class1 <- as.character(OTU_abund_top100_eu_sum$color_hex_class)
names(color_class1) <- as.character(OTU_abund_top100_eu_sum$Class)
OTU_abund_top100_eu_sum$OTU_species = with(OTU_abund_top100_eu_sum, reorder(OTU_species, Total_OTU))
#CairoPDF(file = "R.Figures/Species/Protist_Aphotic_top20b.pdf", width = 8, height =12)
#pdf(file="R.Figures/Species/Protist_euphotic_top20.pdf")
ggplot(OTU_abund_top100_eu_mean, aes(x=OTU_species, y=Total_OTU, fill=Class)) +
geom_bar(stat="identity", width = 0.9) +
scale_fill_manual(values = color_class1) +
theme_bw() +
theme(aspect.ratio = 2/1) +
#ylim(0,30000) +
ggtitle(paste ("Cryptophytes - Euphotic - SUM")) +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size=6)) +
theme(axis.text.y=element_text(angle = 0, hjust = 1, size=4)) +
theme(panel.grid.major = element_line(size = 0.05, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.05, linetype = 'solid',
colour = "grey")) +
theme(axis.ticks = element_line(colour = "black", size = 0.05)) +
xlab("") +
ylab("Cumulative OTU - Sequencing depth standarized abundance") +
coord_flip() +
facet_wrap(~Water_mass.TS1, scales="free")
OTU_abund_top100_eu_sum <- OTU_abund_top100_eu %>%
distinct(OTU_water, .keep_all = TRUE) %>%
arrange(Water_mass.TS1, -Total_OTU) %>%
group_by(Water_mass.TS1) %>%
top_n(20,Total_OTU)
#CairoPDF(file = "R.Figures/Species/Protist_Aphotic_top20b.pdf", width = 8, height =12)
#pdf(file="R.Figures/Species/Protist_euphotic_top20.pdf")
ggplot(OTU_abund_top100_eu_sum, aes(x=OTU_species, y=Total_OTU, fill=Class)) +
geom_bar(stat="identity", width = 0.9) +
scale_fill_manual(values = color_class1) +
theme_bw() +
theme(aspect.ratio = 2/1) +
#ylim(0,30000) +
ggtitle(paste ("Cryptophytes - Euphotic - SUM")) +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size=6)) +
theme(axis.text.y=element_text(angle = 0, hjust = 1, size=4)) +
theme(panel.grid.major = element_line(size = 0.05, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.05, linetype = 'solid',
colour = "grey")) +
theme(axis.ticks = element_line(colour = "black", size = 0.05)) +
xlab("") +
ylab("Cumulative OTU - Sequencing depth standarized abundance") +
coord_flip() +
facet_wrap(~Water_mass.TS1, scales="free")
OTU_abund_top100_eu  <- OTU_abund_top100 %>%
filter(light_layer == "Euphotic") %>%
group_by(OTUNumber, Water_mass.TS1) %>%
add_tally() %>%
mutate(mean_OTU = mean(n_reads, na.rm=TRUE), median_OTU = median(n_reads, na.rm=TRUE), Total_OTU = sum(n_reads, na.rm = TRUE), n_samples = mean(n)) %>%
select(OTUNumber:Water_mass.TS1, Sample_Type, light_layer, supergroup:Total_OTU) %>%
arrange(Water_mass.TS1, -Total_OTU) %>%
unite(OTU_water, OTUNumber, Water_mass.TS1, remove = FALSE) %>% # to allow selecting for distinct OTUs
unite(OTU_genus, OTUNumber, Genus, remove = FALSE) %>%
unite(OTU_species, OTUNumber, Species, remove = FALSE)
## Select most abundant OTUs for plotting SUM TOTAL read abundance values
OTU_abund_top100_eu_sum <- OTU_abund_top100_eu %>%
distinct(OTU_water, .keep_all = TRUE) %>%
arrange(Water_mass.TS1, -Total_OTU) %>%
group_by(Water_mass.TS1) %>%
top_n(20,Total_OTU)
write.xlsx(OTU_abund_top100_eu_sum, file = "R.Figures/Species/perClass/Crypto_species_sum.xlsx")
# color coding # Water mass - SUM
color_class1 <- as.character(OTU_abund_top100_eu_sum$color_hex_class)
names(color_class1) <- as.character(OTU_abund_top100_eu_sum$Class)
OTU_abund_top100_eu_sum$OTU_species = with(OTU_abund_top100_eu_sum, reorder(OTU_species, Total_OTU))
#CairoPDF(file = "R.Figures/Species/Protist_Aphotic_top20b.pdf", width = 8, height =12)
#pdf(file="R.Figures/Species/Protist_euphotic_top20.pdf")
ggplot(OTU_abund_top100_eu_sum, aes(x=OTU_species, y=Total_OTU, fill=Class)) +
geom_bar(stat="identity", width = 0.9) +
scale_fill_manual(values = color_class1) +
theme_bw() +
theme(aspect.ratio = 2/1) +
#ylim(0,30000) +
ggtitle(paste ("Cryptophytes - Euphotic - SUM")) +
theme(axis.text.x=element_text(angle = 45, hjust = 1, size=6)) +
theme(axis.text.y=element_text(angle = 0, hjust = 1, size=4)) +
theme(panel.grid.major = element_line(size = 0.05, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.05, linetype = 'solid',
colour = "grey")) +
theme(axis.ticks = element_line(colour = "black", size = 0.05)) +
xlab("") +
ylab("Cumulative OTU - Sequencing depth standarized abundance") +
coord_flip() +
facet_wrap(~Water_mass.TS1, scales="free")
ggsave("Cryptophytes_euphotic_top20_SUM_OTUs.pdf", path = "R.Figures/Species/perClass", dpi = 300, height = 4, width = 8)
#CairoPDF(file = "R.Figures/Species/Protist_synd_euphotic_top20_STF_TOP100.pdf", width = 3, height = 4)
ggplot(Top_otu_order, aes(x=name, y=Total_OTU, fill=Class)) +
geom_bar(stat = "identity", width = 0.95) +
coord_flip() +
#scale_fill_viridis_d(option = "plasma") +
scale_fill_manual(values = color_class1) +
ylim(0,7000) +
theme_bw() +
theme(aspect.ratio = 2/1) +
ggtitle(paste (" Prymn - STW - SUM")) +
theme(axis.text.x=element_text(angle = 0, hjust = 1, size=12)) +
theme(axis.text.y=element_text(angle = 45, hjust = 1, size=12)) +
xlab("") +
ylab("Sum OTU - Sequencing depth standarized abundance")
Top_otu_order <- OTU_abund_top100_eu_sum %>%
filter(Water_mass.TS1 == "STW") %>%
mutate(name = fct_reorder(OTU_species, Total_OTU))
#CairoPDF(file = "R.Figures/Species/Protist_synd_euphotic_top20_STF_TOP100.pdf", width = 3, height = 4)
ggplot(Top_otu_order, aes(x=name, y=Total_OTU, fill=Class)) +
geom_bar(stat = "identity", width = 0.95) +
coord_flip() +
#scale_fill_viridis_d(option = "plasma") +
scale_fill_manual(values = color_class1) +
ylim(0,7000) +
theme_bw() +
theme(aspect.ratio = 2/1) +
ggtitle(paste (" Prymn - STW - SUM")) +
theme(axis.text.x=element_text(angle = 0, hjust = 1, size=12)) +
theme(axis.text.y=element_text(angle = 45, hjust = 1, size=12)) +
xlab("") +
ylab("Sum OTU - Sequencing depth standarized abundance")
ggsave("Crypto_euphotic_top20_STW_SUM.pdf", path = "R.Figures/Species/perClass", dpi = 300,  width = 8, height = 16, scale=1.2)
## Reordering and plotting using forcat package - One water mass at at time
Top_otu_order <- OTU_abund_top100_eu_sum %>%
filter(Water_mass.TS1 == "SAW") %>%
mutate(name = fct_reorder(OTU_species, Total_OTU))
#CairoPDF(file = "R.Figures/Species/Protist_synd_euphotic_top20_STF_TOP100.pdf", width = 3, height = 4)
ggplot(Top_otu_order, aes(x=name, y=Total_OTU, fill=Class)) +
geom_bar(stat = "identity", width = 0.95) +
coord_flip() +
#scale_fill_viridis_d(option = "plasma") +
scale_fill_manual(values = color_class1) +
ylim(0,7000) +
theme_bw() +
theme(aspect.ratio = 2/1) +
ggtitle(paste (" Prymn - SAW - SUM")) +
theme(axis.text.x=element_text(angle = 0, hjust = 1, size=12)) +
theme(axis.text.y=element_text(angle = 45, hjust = 1, size=12)) +
xlab("") +
ylab("Sum OTU - Sequencing depth standarized abundance")
#facet_wrap(~Water_mass.TS1, scales="free")
#dev.off()
ggsave("Crypto_euphotic_top20_SAW_SUM.pdf", path = "R.Figures/Species/perClass", dpi = 300,  width = 8, height = 16, scale=1.2)
## Reordering and plotting using forcat package - One water mass at at time
Top_otu_order <- OTU_abund_top100_eu_sum %>%
filter(Water_mass.TS1 == "STF") %>%
mutate(name = fct_reorder(OTU_species, Total_OTU))
#CairoPDF(file = "R.Figures/Species/Protist_synd_euphotic_top20_STF_TOP100.pdf", width = 3, height = 4)
ggplot(Top_otu_order, aes(x=name, y=Total_OTU, fill=Class)) +
geom_bar(stat = "identity", width = 0.95) +
coord_flip() +
#scale_fill_viridis_d(option = "plasma") +
scale_fill_manual(values = color_class1) +
ylim(0,7000) +
theme_bw() +
theme(aspect.ratio = 2/1) +
ggtitle(paste (" Prymn - STF - SUM")) +
theme(axis.text.x=element_text(angle = 0, hjust = 1, size=12)) +
theme(axis.text.y=element_text(angle = 45, hjust = 1, size=12)) +
xlab("") +
ylab("Sum OTU - Sequencing depth standarized abundance")
#facet_wrap(~Water_mass.TS1, scales="free")
#dev.off()
ggsave("Crypto_euphotic_top20_STF_SUM.pdf", path = "R.Figures/Species/perClass", dpi = 300,  width = 8, height = 16, scale=1.2)
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(readr)
library(maps)
library(glue)
library("cowplot")
library("treemapify")
library("Cairo")
library("cairoDevice")
library(phyloseq)
library("readxl")
library("openxlsx")
library("gplots")
library(forcats)
library(mgcv)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", type = "binary") # (not binary if you're on linux)
BiocManager::install(c("phyloseq", "microbiome"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", type = "binary") # (not binary if you're on linux)
BiocManager::install(c("phyloseq", "microbiome"))
devtools::install_github("david-barnett/microViz")
library("cowplot")
# get some example data
data("dietswap", package = "microbiome")
# create a couple of numerical variables to use as constraints or conditions
dietswap <- dietswap %>%
ps_mutate(
weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),
female = if_else(sex == "female", true = 1, false = 0)
)
library(phyloseq)
# create a couple of numerical variables to use as constraints or conditions
dietswap <- dietswap %>%
ps_mutate(
weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),
female = if_else(sex == "female", true = 1, false = 0)
)
library(microbiome)
# get some example data
data("dietswap", package = "microbiome")
# create a couple of numerical variables to use as constraints or conditions
dietswap <- dietswap %>%
ps_mutate(
weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),
female = if_else(sex == "female", true = 1, false = 0)
)
library(microViz)
install.packages("microViz")
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
